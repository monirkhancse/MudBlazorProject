@page "/customers"

@using MudBlazorProject.Data
@using System.ComponentModel.DataAnnotations
@inject MudBlazorProject.IService.ICustomerService customerService
@inject MudBlazor.ISnackbar snackBar


<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Customers</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <EditForm Model="@customer">
    <MudCardContent>
        <MudForm Model="@customer" OnValidSubmit="HandleValidSubmit">
                <MudTextField @bind-Value="customer.FirstName" For="@(() => customer.FirstName)" Label="First Name" Variant="Variant.Text" Margin="Margin.Normal" />
                <MudTextField @bind-Value="customer.LastName" For="@(() => customer.LastName)" Label="Last Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                <MudTextField @bind-Value="customer.PhoneNumber" For="@(() => customer.PhoneNumber)" InputType="InputType.Number" Label="Mobile" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                <MudTextField @bind-Value="customer.Email" For="@(() => customer.Email)" InputType="InputType.Email" Label="Email" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                <MudTextField @bind-Value="customer.Address" For="@(() => customer.Address)" InputType="InputType.Text" Label="Address" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                
        <br />
        @if (customer.Id == 0)
        {
             <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Customer</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Update">Update Customer</MudButton>
        }
        </MudForm>

        </MudCardContent>
    </EditForm>
</MudCard>
<br />
<MudTable Elevation="25" Items="GetCustomers()" Filter="new Func<Customer, bool>(Search)" @bind-customer="customer">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Customers</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Customers..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Mobile</MudTh>
        <MudTh>Address</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Mobile">@context.PhoneNumber</MudTd>
        <MudTd DataLabel="Address">@context.Address</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>



@code {
    private string searchString = "";
    private Customer customer = new Customer();
    //Customer model = new Customer();
    private List<Customer> customers = new List<Customer>();

    private bool Search(Customer customer)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (customer.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || customer.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || customer.PhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }
    protected override void OnInitialized()
    {
        GetCustomers();
    }
    private List<Customer> GetCustomers()
    {
        customers = customerService.GetCustomers();
        return customers;
    }
    private void Save()
    {
        customerService.AddCustomer(customer);
        customer = new Customer();
        snackBar.Add("Save Customer.", Severity.Success);
        GetCustomers();
    }
    private void Update()
    {
        customerService.UpdateCustomer(customer);
        customer = new Customer();
        snackBar.Add("Update Customer.", Severity.Info);
    }
    private void Edit(int id)
    {
        customer = customers.FirstOrDefault(c => c.Id == id);
    }
    private void Delete(int id)
    {
        customerService.DeleteCustomer(id);
        snackBar.Add("Delete Customer.", Severity.Error);
        GetCustomers();
    }

}
